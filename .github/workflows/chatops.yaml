name: W&B ChatOps

on: 
  issue_comment:
    types: [created, edited]

permissions:
  contents: read
  issues: write
  pull-requests: write
  
jobs: 
  chatops:
    if: (github.event.issue.pull_request != null) && (contains(github.event.comment.body, '/link-run') || contains(github.event.comment.body, '/promote-run'))
    runs-on: ubuntu-latest
    steps:  
    - name: Checkout code
      uses: actions/checkout@v4  

    - name: Set up environment
      run: pip install ghapi wandb wandb-workspaces

    - name: Parse comment command
      id: parser
      shell: python
      run: |
        import os, re
        comment = os.environ['PR_COMMENT']

        command = '/link-run' if '/link-run' in comment else '/promote-run'
        match = re.search(f'{command} (\\S+) (\\S+)', comment)
        if match:
            run_id, text = match.groups()

        if not all([command, run_id, text]):
            raise ValueError("Invalid command format.")

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print(f'COMMAND={command}', file=f)
            print(f'RUN_ID={run_id}', file=f)
            print(f'TEXT={text}', file=f)
      env:
        PR_COMMENT: ${{ github.event.comment.body }}

    - name: Link run and create report
      if: steps.parser.outputs.COMMAND == '/link-run'
      id: create-report
      shell: python
      run: |
        import os
        from utils import get_run_by_unique_tag, get_run_by_id, create_comparison_report
        entity, project = 'FacuRoffet99', 'pytorch-intro'
        run_id, tag = os.environ['RUN_ID'], os.environ['TEXT']
        base_run = get_run_by_unique_tag(entity, project, tag)
        new_run = get_run_by_id(entity, project, run_id)
        _ = create_comparison_report(entity, project, tag, base_run, new_run)
      env:
        WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        RUN_ID: ${{ steps.parser.outputs.RUN_ID }}
        TEXT: ${{ steps.parser.outputs.TEXT }}
        PYTHONPATH: .

    - name: Promote run to registry
      if: steps.parser.outputs.COMMAND == '/promote-run'
      id: promote-run
      shell: python
      run: |
        import os
        from utils import promote_run_by_id
        entity, project, collection = 'FacuRoffet99', 'pytorch-intro', 'MNIST Classifier'
        run_id, alias = os.environ['RUN_ID'], os.environ['TEXT']
        _ = promote_run_by_id(entity, project, collection, run_id, alias)
      env:
        WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        RUN_ID: ${{ steps.parser.outputs.RUN_ID }}
        TEXT: ${{ steps.parser.outputs.TEXT }}
        PYTHONPATH: .

    - name: Create comment and add label
      shell: python
      run: |
        import os
        from ghapi.core import GhApi
      
        owner, repo = os.environ['REPO'].split('/')
        api = GhApi(owner=owner, repo=repo, token=os.environ['GITHUB_TOKEN'])
        command, text = os.environ['COMMAND'], os.environ['TEXT']

        if command == '/link-run':
            message = f"Comparison report generated: {os.environ['REPORT_URL']}."
            labels = ["experiment-linked"]
        elif command == '/promote-run':
            message = f"Model promoted to the registry with tag `{text}`: {os.environ['REGISTRY_URL']}"
            labels = ["model-promoted"]

        api.issues.create_comment(os.environ['ISSUE_NUMBER'], message)
        api.issues.add_labels(os.environ['ISSUE_NUMBER'], labels)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: ${{ github.repository }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        COMMAND: ${{ steps.parser.outputs.COMMAND }}
        TEXT: ${{ steps.parser.outputs.TEXT }}
        REPORT_URL: ${{ steps.create-report.outputs.REPORT_URL }}
        REGISTRY_URL: ${{ steps.promote-run.outputs.REGISTRY_URL }}
